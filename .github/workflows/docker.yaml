name: Sync Docker Image To Aliyun Repo By Api
on:
  repository_dispatch:
    types: sync_docker # 只有当 event_type 为 sync_docker 时触发
jobs:
  sync-task:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        images: ${{ github.event.client_payload.images }}
    steps:
      - uses: actions/checkout@v4
      - name: Sync ${{ matrix.images.source }} to ${{ matrix.images.target }}
        run: |
          docker pull --platform ${{ matrix.images.platform || 'linux/amd64' }} $source_docker_image
          docker tag $source_docker_image $target_docker_image
          docker login --username=${{ secrets.ALIYUN_REGISTRY_USER }} --password=${{ secrets.ALIYUN_REGISTRY_PASSWORD }} ${{ secrets.ALIYUN_REGISTRY }}
          docker push $target_docker_image
        env:
          source_docker_image: ${{ matrix.images.source }}
          target_docker_image: ${{ secrets.ALIYUN_REGISTRY }}/${{ secrets.ALIYUN_NAME_SPACE }}/${{ matrix.images.target }}

      - name: Acquire lock using GitHub API
        id: lock
        run: |
          # 检查锁文件是否存在
          if curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.S_TOKEN }}" \
            https://api.github.com/repos/${{ secrets.S_REPO }}/contents/.lock | grep -q 200; then
            echo "Lock file exists, waiting..."
            sleep 10
            exit 1
          else
            # 创建锁文件
            echo "Lock file does not exist, creating lock..."
            curl -X PUT -H "Authorization: token ${{ secrets.S_TOKEN }}" \
              -d '{"message":"Create lock file","content":"IyBsb2NrCg=="}' \
              https://api.github.com/repos/${{ secrets.S_REPO }}/contents/.lock
            echo "Lock acquired."
          fi
        continue-on-error: true

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.S_REPO }} # 使用 secrets.S_REPO 动态指定私库
          token: ${{ secrets.S_TOKEN }}    # 使用 S_TOKEN 进行身份验证
          path: private-repo              # 指定拉取的私库存放路径




      - name: Append docker pull command to image_list.txt
        run: |
          # 去重处理
          cat private-repo/image_list.txt | awk '!seen[$0]++' > private-repo/image_list_temp.txt
          mv private-repo/image_list_temp.txt private-repo/image_list.txt  # 修复路径

          # 检查是否已经存在相同的 docker pull 命令
          if ! grep -Fxq "docker pull $target_docker_image" private-repo/image_list.txt; then
            # 如果不存在，则追加新的 docker pull 命令
            echo "docker pull $target_docker_image" >> private-repo/image_list.txt
          else
            echo "Docker pull command already exists in image_list.txt, skipping append."
          fi
        env:
          target_docker_image: ${{ secrets.ALIYUN_REGISTRY }}/${{ secrets.ALIYUN_NAME_SPACE }}/${{ matrix.images.target }}

      - name: Check if there are changes to commit
        id: check_changes
        run: |
          cd private-repo
          if [ -n "$(git status --porcelain)" ]; then
            echo "::set-output name=has_changes::true"
          else
            echo "::set-output name=has_changes::false"
          fi

      - name: Commit local changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          cd private-repo
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add image_list.txt  # 确保添加正确的文件
          git commit -m "Update image_list.txt with new docker pull command"

      - name: Fetch and merge remote changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          cd private-repo
          git fetch origin main
          git merge origin/main

      - name: Push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          cd private-repo
          git push https://x-access-token:${{ secrets.S_TOKEN }}@github.com/${{ secrets.S_REPO }}.git HEAD:main

      - name: Get lock file SHA
        id: get_lock_sha
        run: |
          LOCK_SHA=$(curl -s -H "Authorization: token ${{ secrets.S_TOKEN }}" \
            https://api.github.com/repos/${{ secrets.S_REPO }}/contents/.lock | jq -r '.sha')
          echo "::set-output name=sha::$LOCK_SHA"

      - name: Release lock using GitHub API
        if: always()
        run: |
          curl -X DELETE -H "Authorization: token ${{ secrets.S_TOKEN }}" \
            -d '{"message":"Release lock file", "sha": "${{ steps.get_lock_sha.outputs.sha }}"}' \
            https://api.github.com/repos/${{ secrets.S_REPO }}/contents/.lock
          echo "Lock released."
